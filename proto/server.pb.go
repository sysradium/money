// Code generated by protoc-gen-gogo.
// source: proto/server.proto
// DO NOT EDIT!

/*
	Package money is a generated protocol buffer package.

	It is generated from these files:
		proto/server.proto

	It has these top-level messages:
		Quote
*/
package money

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import github_com_sysradium_money_money "github.com/sysradium/money/money"
import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Quote struct {
	Price     *github_com_sysradium_money_money.Money `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/sysradium/money/money.Money" json:"price,omitempty"`
	Timestamp *time.Time                              `protobuf:"bytes,2,opt,name=timestamp,stdtime" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Quote_Name
	//	*Quote_Count
	Value isQuote_Value `protobuf_oneof:"value"`
}

func (m *Quote) Reset()                    { *m = Quote{} }
func (m *Quote) String() string            { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()               {}
func (*Quote) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

type isQuote_Value interface {
	isQuote_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Quote_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}
type Quote_Count struct {
	Count int64 `protobuf:"varint,4,opt,name=count,proto3,oneof"`
}

func (*Quote_Name) isQuote_Value()  {}
func (*Quote_Count) isQuote_Value() {}

func (m *Quote) GetValue() isQuote_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Quote) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Quote) GetName() string {
	if x, ok := m.GetValue().(*Quote_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Quote) GetCount() int64 {
	if x, ok := m.GetValue().(*Quote_Count); ok {
		return x.Count
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Quote) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Quote_OneofMarshaler, _Quote_OneofUnmarshaler, _Quote_OneofSizer, []interface{}{
		(*Quote_Name)(nil),
		(*Quote_Count)(nil),
	}
}

func _Quote_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Quote)
	// value
	switch x := m.Value.(type) {
	case *Quote_Name:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Name)
	case *Quote_Count:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Count))
	case nil:
	default:
		return fmt.Errorf("Quote.Value has unexpected type %T", x)
	}
	return nil
}

func _Quote_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Quote)
	switch tag {
	case 3: // value.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Quote_Name{x}
		return true, err
	case 4: // value.count
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Quote_Count{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Quote_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Quote)
	// value
	switch x := m.Value.(type) {
	case *Quote_Name:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *Quote_Count:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Count))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Quote)(nil), "money.Quote")
	golang_proto.RegisterType((*Quote)(nil), "money.Quote")
}
func (m *Quote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Price != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Price.Size()))
		n1, err := m.Price.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Value != nil {
		nn3, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Quote_Name) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}
func (m *Quote_Count) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintServer(dAtA, i, uint64(m.Count))
	return i, nil
}
func encodeFixed64Server(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Server(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Quote) Size() (n int) {
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Quote_Name) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovServer(uint64(l))
	return n
}
func (m *Quote_Count) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovServer(uint64(m.Count))
	return n
}

func sovServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Quote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_sysradium_money_money.Money
			m.Price = &v
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Quote_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Quote_Count{v}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/server.proto", fileDescriptorServer) }
func init() { golang_proto.RegisterFile("proto/server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xfb, 0x68, 0x52, 0xa8, 0xdb, 0xc9, 0xaa, 0x50, 0x94, 0x21, 0x89, 0x18, 0x50, 0x40,
	0xc2, 0x91, 0xda, 0x8d, 0x09, 0x65, 0xea, 0xc2, 0x40, 0x04, 0x07, 0x48, 0x52, 0x13, 0x22, 0xd5,
	0x71, 0x14, 0xdb, 0x95, 0x7a, 0x03, 0x46, 0xae, 0xc0, 0x4d, 0x18, 0x23, 0x26, 0x66, 0x86, 0x82,
	0xd2, 0x8b, 0xa0, 0xda, 0x2a, 0x85, 0xe5, 0xc9, 0x9f, 0xfc, 0xff, 0xf6, 0xf7, 0x10, 0xae, 0x1b,
	0x2e, 0x79, 0x24, 0x68, 0xb3, 0xa2, 0x0d, 0xd1, 0x80, 0x6d, 0xc6, 0x2b, 0xba, 0x76, 0xaf, 0x8a,
	0x52, 0x3e, 0xa9, 0x8c, 0xe4, 0x9c, 0x45, 0x05, 0x2f, 0x78, 0xa4, 0x6f, 0x33, 0xf5, 0xa8, 0xc9,
	0xf4, 0x76, 0x27, 0xd3, 0x72, 0xfd, 0x82, 0xf3, 0x62, 0x49, 0x0f, 0x29, 0x59, 0x32, 0x2a, 0x64,
	0xca, 0x6a, 0x13, 0x38, 0x7b, 0x07, 0x64, 0xdf, 0x29, 0x2e, 0x29, 0xbe, 0x41, 0x76, 0xdd, 0x94,
	0x39, 0x75, 0x20, 0x80, 0x70, 0x1c, 0x5f, 0x7e, 0x6e, 0xfc, 0xf3, 0x3f, 0x9f, 0x89, 0xb5, 0x68,
	0xd2, 0x45, 0xa9, 0x58, 0xa4, 0x45, 0xcc, 0x24, 0xb7, 0xbb, 0x99, 0x98, 0x22, 0x8e, 0xd1, 0xf0,
	0xf7, 0x79, 0xe7, 0x28, 0x80, 0x70, 0x34, 0x75, 0x89, 0x11, 0x20, 0x7b, 0x01, 0x72, 0xbf, 0x4f,
	0xc4, 0x27, 0xed, 0xc6, 0x87, 0x97, 0x2f, 0x1f, 0x92, 0x43, 0x0d, 0x4f, 0x90, 0x55, 0xa5, 0x8c,
	0x3a, 0xfd, 0x00, 0xc2, 0xe1, 0xbc, 0x97, 0x68, 0xc2, 0xa7, 0xc8, 0xce, 0xb9, 0xaa, 0xa4, 0x63,
	0x05, 0x10, 0xf6, 0xe7, 0xbd, 0xc4, 0xe0, 0xb5, 0xf5, 0xfc, 0xea, 0x43, 0x7c, 0x8c, 0xec, 0x55,
	0xba, 0x54, 0x74, 0x3a, 0x43, 0x03, 0xbd, 0x8b, 0xc0, 0x17, 0x68, 0xf4, 0x50, 0x2f, 0x52, 0x49,
	0xcd, 0x6e, 0x63, 0x62, 0x74, 0x35, 0xb9, 0xff, 0x28, 0x9e, 0xb4, 0x9d, 0x07, 0x1f, 0x9d, 0x07,
	0xdf, 0x9d, 0x07, 0x6f, 0x5b, 0x0f, 0xda, 0xad, 0x07, 0xd9, 0x40, 0x0b, 0xcf, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x9e, 0x0c, 0x05, 0x8b, 0x01, 0x00, 0x00,
}
